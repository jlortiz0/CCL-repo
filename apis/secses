function isPrime(num)
  if type(num)~="number" or num<2 then
    return false
  elseif num<4 then
    return true
  end
  for i=2, math.sqrt(num) do
    if num%i==0 then return false end
  end
  return true
end
function gcd(m,n)
  while m~=0 do
    m,n=n%m, m
  end
  return n
end
local results
function isPrimitiveRootOld(m,n)
  --Is m a primitive root of n
  results={}
  local r=0
  for i=0,math.huge do
    if results[(m^i)%n] then
      r=(m^i)%n.." "..i
      break
    else
      results[(m^i)%n]=true
    end
  end
  for g=2, n-1 do
    if not results[g] then
      return false, g, r
    end
  end
  return true
end

function iPRFast(m,n)
  --if n%4~=1 then return isPrimativeRootOld(m,n) end
  return (m^((n-1)/2)%n)==n-1, tonumber(m^((n-1)/2)%n), m^(n/2)
end

function getDHPrimes()
  local p,g=0,1
  local sClock=os.clock()
  while not isPrime(p) do
    p=math.random(1,2^31-1)
  end
  local oi=7500
  repeat
    repeat
      g=g+2
    until isPrime(g) and g%4==1
    term.clearLine()
    term.setCursorPos(1,select(2,term.getCursorPos()))
    write(p.." "..g.." ")
    write(select(2, iPRFast(g,p)).." ")
    write(select(3, iPRFast(g,p)))
    if g>oi then sleep(0) oi=oi+7500 end
  until iPRFast(g, p)
  print("And it only took "..(os.clock()-sClock).." seconds!")
  return p,g
end
