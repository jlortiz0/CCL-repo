print("Loading...")
local sid = rednet.lookup("SimOSStore")
if not sid then 
printError("Could not find the SimOS package store.") 
return 
end

while true do
local n = system.drawMenu({"Sign In","Get Creator ID","Exit"}, "This program allows you to publish to the program store.\n")
if n==3 then return
elseif n==2 then
print("Please pick a username and password.")
rednet.send(sid, {"register", read(), read("*")}, "SStore")
local _,msg = rednet.receive("SStore", 10)
if msg=="good" then
print("You have been registered.")
elseif msg=="badun" then
print("That username is taken.")
elseif msg=="badps" then
print("That password was rejected, for whatever reason.")
end
sleep(2)
elseif n==1 then
print("Please enter username and password:")
local un = read()
local ps = read("*")
rednet.send(sid, {"checkid", un, ps}, "SStore")
local _,msg = rednet.receive("SStore", 10)
if msg=="badun" then print("No such user.")
elseif msg=="badps" then print("Password is incorrect.")
elseif msg=="good" then
while true do
n=system.drawMenu({"Publish new package","Manage existing packages","Exit"}, "Logged in as "..un.."\n")
if n==3 then return
elseif n==2 then
rednet.send(cid, {"getpublished", un}, "SStore")
--TODO
elseif n==1 then
write("Codename of program:")
local pubmsg = {"publish", un, ps, read()}
rednet.send(sid, {"info", pubmsg[4]}, "SStore")
local _, msg = rednet.receive("SStore", 10)
if msg ~= "nope" then
print("Name is already in use.")
sleep(2)
else
write("Name of program:")
table.insert(pubmsg, {read(), pubmsg[4].."/main", "rm "..pubmsg[4]})
print("Directory that the program files are in:")
msg = read()
if not fs.isDir(msg) then
print("Not a directory.")
sleep(2)
else
local function zip(dir)
local fat = {}
for _, file in pairs(fs.list(dir)) do
local fi=fs.open(fs.combine(dir, file), "r")
table.insert(fat, {file, fi.readAll()})
fi.close()
end return fat end
table.insert(pubmsg, zip(msg))
rednet.send(sid, pubmsg, "SStore")
_,msg = rednet.receive("SStore")
if not msg then 
print("The publish failed...") 
sleep(2) 
end
end 
end 
end 
end 
end 
end 
end
