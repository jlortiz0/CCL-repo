if ...=="clean" then
  print("Type YES to delete all JMailServer data.")
  if string.upper(read())=="YES" then
    fs.delete("/mail")
    fs.delete("JMailServer.log")
    fs.delete("JMailServer.cfg")
    print("Done.")
  end
  return
end
if not fs.isDir("/mail/") then fs.makeDir("/mail") end
fs.open("JMailServer.log", "a").close()
term.clear()
term.setCursorPos(1,1)
print("Loading JMailServer 2.4...")
local set
if not fs.exists("JMailServer.cfg") then
  print("No config found---generating one.")
 set=fs.open("JMailServer.cfg", "w")
  set.write("{\
  --Please log these comments elsewhere, as they may be lost due to the saving system\
  --Logs all non-erronous, non-suspicious server access\
  logverbose = false,\
  --Blacklist settings, enabled but empty by default, overrides Whitelist\
  blist = {\
  [ "..os.computerID().." ]=true\
  },\
  useblist = true,\
  --If the server tempbans for failed login attempts\
  fail2ban = true,\
  --In seconds\
  banduration = 600,\
  --How many login/register attempts a user is allowed\
  logina = 3,\
  rega = 5,\
  --If the server accepts mail from other servers\
  getmailremote = true,\
  --A list of usernames nobody is allowed to use\
  bannedun = {\
    guest = true,\
    admin = true,\
    server = true,\
    public = true,\
  },\
  --Whitelist settings, only allows specified people to connect\
  usewlist = false,\
  wlist = {},\
  --If registration is allowed\
  allownewuser = true,\
  --If disabled, the server will not sendmail to remote servers\
  sendmailremote = true,\
  --The hostname of the server,for clientside use\
  hostname=\"mail"..os.computerID().."\",\
  --Set below to nil to disable password\
  adminpass = \"admin\",\
}")
 set.close()
 if ...=="cfgdefault" then return end
end
local log = fs.open("JMailServer.cfg", "r")
set=textutils.unserialize(log.readAll())
log.close()
set.run=true
local connected = {}
for k in io.lines("JMailServer.log") do
  table.insert(connected, k)
end
while #connected>128 do
  table.remove(connected, 1)
end
log = fs.open("JMailServer.log", "w")
log.writeLine(table.concat(connected, "\n"))
log.flush()
local function logEvent(t)
  log.writeLine("["..os.day().."/"..os.time().."] "..t)
  log.flush()
end
logEvent("Starting server...")
connected={}
local shelldir=shell.dir()

local function connect(cid)
  local la, ra = 0, 0
  local function getMsg()
    local id, msg = rednet.receive("JMail", 600)
    if cid ~= id and id ~= nil then return getMsg()
    elseif not id then error("Dropped client "..cid, 0)
    elseif id==cid and not set.run then
      rednet.send(cid, {"QUIT", "Server shutting down"}, "JMail")
      return "QUIT"
    else return msg end
  end
  while true do
    local msg = getMsg()
    if msg=="QUIT" then
      if set.logverbose then logEvent(cid.." disconnected") end
      return
    elseif msg=="REGA" then rednet.send(cid, set.allownewuser, "JMail")
    elseif type(msg)=="table" then
      if msg[1]=="VRFY" and type(msg[2])=="string" then rednet.send(cid, fs.isDir("/mail/"..msg[2]) and msg[2]~="", "JMail")
      elseif msg[1]=="REG" and set.allownewuser and not set.bannedun[msg[2]] then
        if not fs.exists("/mail/"..msg[2]) then
          fs.makeDir("/mail/"..msg[2].."/mail")
          local f = fs.open("/mail/"..msg[2].."/pass", "w")
          f.write(msg[3])
          f.close()
          f = fs.open("/mail/"..msg[2].."/mail/Welcome from SERVER@"..set.hostname, "w")
          f.write("Hello "..msg[2]..",\nWelcome to mail server "..set.hostname..".\nWe hope that you will find our services satisfactory.\nRemember, your password is "..msg[3]..".\n\nThanks,\nAdmin")
          f.close()
          rednet.send(cid, true, "JMail")
        else
          if set.fail2ban then
            ra=ra+1
            if ra>set.rega then
              rednet.send(cid, {"QUIT", "Too many registration attempts; Banned for "..set.banduration.."s"}, "JMail")
              set.blist[cid]=os.clock()+set.banduration
              logEvent("Tempbanned "..cid..": too many registration attempts")
              return
            end
          end
          rednet.send(cid, false, "JMail")
        end
      elseif msg[1]=="AUTH" and fs.exists("/mail/"..msg[2]) then
        local f = fs.open("/mail/"..msg[2].."/pass", "r")
        local ps = f.readAll()
        f.close()
        if ps==msg[3] then
          local un=msg[2]
          rednet.send(cid, true, "JMail")
          while true do
            local msg = getMsg()
            if msg=="QUIT" then 
              if set.verbose then logEvent(cid.." disconnected") end
              return
            elseif type(msg)=="table" then
                if msg[1]=="GET" and type(msg[2])=="string" and type(msg[2]:find("..")~="number") then
                    if fs.isDir("/mail/"..un.."/mail/"..msg[2]) then
                        local reply = {fs.list("/mail/"..un.."/mail/"..msg[2]), {}}
                        for i=1, #reply[1] do
                            table.insert(reply[2], fs.isDir("/mail/"..un.."/mail/"..msg[2]..reply[1][i]))
                        end
                        rednet.send(cid, reply, "JMail")
                    else
                        local h = fs.open("/mail/"..un.."/mail/"..msg[2], "r")
                        if not h then rednet.send(cid, false, "JMail") end
                        rednet.send(cid, h.readAll(), "JMail")
                        h.close()
                    end
                elseif msg[1]=="DEL" and not string.find(msg[2],"../") then fs.delete("/mail/"..un.."/mail/"..msg[2])
                elseif msg[1]=="MV" and not (string.find(msg[2], "../") or string.find(msg[3], "../")) then fs.move("/mail/"..un.."/mail/"..msg[2], "/mail/"..un.."/mail/"..msg[3])
                elseif msg[1]=="PC" then
                  local f = fs.open("/mail/"..un.."/pass", "r")
                  if f.readAll() ~= msg[2] then 
                    rednet.send(cid, false, "JMail")
                    f.close()
                    logEvent(cid.." failed to change password of "..un)
                    local i=1
                    while fs.exists("/mail/"..un.."/mail/Passchange Failiure "..i.." from SERVER@"..set.hostname) do
                      i=i+1
                    end
                    f=fs.open("/mail/"..un.."/mail/Passchange Failure "..i.." from SERVER@"..set.hostname, "w")
                    f.write("On "..os.day().." at "..os.time().." someone unsucessfully attempted to change your password.\n If this was not you, please secure your account.\nThe request was made from computer "..cid.."\nThanks,\nAdmin")
                  else
                    f.close()
                    f=fs.open("/mail/"..un.."/pass", "w")
                    f.write(msg[3])
					               f.close()
                    logEvent(cid.." changed pass for "..un)
					               while fs.exists("/mail/"..un.."/mail/Passchange "..i.." from SERVER@"..set.hostname) do
                      i=i+1
                    end
                    f=fs.open("/mail/"..un.."/mail/Passchange "..i.." from SERVER@"..set.hostname, "w")
                    f.write("On "..os.day().." at "..os.time().." someone changed your password to "..msg[3]..".\n If this was not you, please secure your account.\nThe request was made from computer "..cid.."\nThanks,\nAdmin")
                    rednet.send(cid, true, "JMail")
                  end
                  f.close()
                elseif msg[1]=="VRFY" and type(msg[2])=="string" then
                  rednet.send(cid, fs.isDir("/mail/"..msg[2]) and msg[2]~="", "JMail")
                elseif msg[1]=="DATA" and pcall(function() table.concat(msg, " ") end) then
                  if tonumber(msg[2])==os.getComputerID() or msg[2]==set.hostname and set.sendmailremote then
                    if fs.exists("/mail/"..msg[3]) and msg[3]~="" then
                      if fs.exists("/mail/"..msg[3].."/mail/"..msg[4].." from "..un.."@"..os.getComputerID()) then
                        rednet.send(cid, "Pick a different subject.", "JMail")
                      else
                        local h = fs.open("/mail/"..msg[3].."/mail/"..msg[4].." from "..un.."@"..os.getComputerID(), "w")
                        h.write(msg[5])
                        h.close()
                        rednet.send(cid, "Mail sent.", "JMail")
                      end
                    else
                      rednet.send(cid, "No such user.", "JMail")
                    end
                  else
                    local oldcid = cid
                    cid = tonumber(msg[2])
                    if not cid then cid=rednet.lookup("JMail", msg[2]) end
                    if not cid then rednet.send(oldcid, "Could not find mail server "..msg[2], "JMail")
                    else
                      rednet.send(cid, {"SENDMAIL", un, table.unpack(msg,3)},"JMail")
                      local reply = getMsg()
                      rednet.send(cid, reply, "JMail")
                    end
                    cid=oldcid
                  end
                else
                  rednet.send(cid, false, "JMail")
                end
            else
              rednet.send(cid, false, "JMail")
            end
          end
        else
          logEvent("Failed login by "..cid.." on username "..msg[2])
          if set.fail2ban then
            la=la+1
            if la>set.logina then
              rednet.send(cid, {"QUIT", "Too many login attempts; Banned for "..set.banduration.."s"}, "JMail")
              set.blist[cid]=os.clock()+set.banduration
              logEvent("Tempbanned "..cid..": Too many login attempts")
              return
            end
          end
          rednet.send(cid, false, "JMail")
        end
      else
        rednet.send(cid, false, "JMail")
      end
    else
      rednet.send(cid, false, "JMail")
    end
  end
end

local function connector(n)
  while true do
    if n and not set.run then return end
    local id, msg = rednet.receive("JMail")
    if msg=="HELO" then
      if type(set.blist[id])=="number" and os.clock()>set.blist[id] then set.blist[id]=nil end
      if connected[id] then
        if set.logverbose then logEvent(id.." is already connected.") end
        rednet.send(id, "Already connected", "JMail")
	     elseif set.useblist and set.blist[id] then
		      if set.logverbose then logEvent(id.." is blacklisted") end
		      rednet.send(id, "Blacklisted", "JMail")
	     elseif set.usewlist and not set.wlist[id] then
		      if set.logverbose then logEvent(id.." is not whitelisted.") end
		      rednet.send(id, "Not whitelisted", "JMail")
      elseif set.run then
        rednet.send(id, "OK connect", "JMail")
        if set.logverbose then logEvent(id.." has connected") end
        connected[id]=true
        parallel.waitForAny(connector, function() local ok, err = pcall(function() connect(id) end); if not ok then logEvent("Session with "..id.." crashed!") logEvent(err) end connected[id]=nil end)
        if n then connector(true) end
        return
      else
        if set.logverbose then logEvent(id.."'s connect rejected") end
        rednet.send(id, "Server shutting down", "JMail")
      end
    elseif type(msg)=="table" and msg[1]=="SENDMAIL" then
	     if set.useblist and set.blist[id] then
		      if set.logverbose then logEvent(id.." sendmail is blacklisted") end
		      rednet.send(id, "The remote server has blacklisted this server.", "JMail")
	     elseif set.usewlist and not set.wlist[id] then
		      if set.logverbose then logEvent(id.." sendmail is not whitelisted.") end
	      	rednet.send(id, "The remote server has not whitelisted this server.", "JMail")
      elseif set.getmailremote and #msg>4 and pcall(function() table.concat(msg, "") end) then
        if set.logverbose then logEvent(id.." sendmail connected") end
        if fs.exists("/mail/"..msg[3]) and msg[3]~="" then
          if fs.exists("/mail/"..msg[3].."/mail/"..msg[4].." from "..msg[2].."@"..id) then
            rednet.send(id, "Pick a different subject.", "JMail")
          else
            local h = fs.open("/mail/"..msg[3].."/mail/"..msg[4].." from "..msg[2].."@"..id, "w")
            h.write(msg[5])
            h.close()
            rednet.send(id, "Mail sent.", "JMail")
          end
        else
          rednet.send(id, "No such user.", "JMail")
        end
      else
        if set.logverbose then logEvent(id.."'s sendmail rejected") end
        rednet.send(id, "The remote server does not accept outside mail.", "JMail")
      end
    end
  end
end

local shWords={cp=true, copy=true, rm=true, remove=true, del=true, delete=true, list=true, ls=true, dir=true, mv=true, move=true, ren=true, rename=true, cd=true, edit=true, clear=true, id=true, mkdir=true, type=true}
local function console()
  local locked, dir, hist = (true and set.adminpass), shell.dir(), {}
  shell.setDir("mail")
  while true do
    if locked then
      write("Terminal locked.\nPassword:")
      if read("*")==set.adminpass then
        locked=false
      else
        print("Incorrect!")
        logEvent("Incorrect console password entered!")
      end
    else
      write(shell.dir()..">")
      local cmd = read(nil, hist)
      table.insert(hist, cmd)
      if cmd=="lock" and set.adminpass then
        locked=true
        term.clear()
        term.setCursorPos(1,1)
      elseif cmd=="exit" then
        set.run = false
		      shell.setDir(dir)
        logEvent("Starting shutdown procedure...")
        print("Server shutting down...")
        print("Waiting for current clients to disconnect...")
        os.queueEvent("rednet_message", os.getComputerID(), "HELO", "JMail")
        return
	     elseif cmd=="bl" then
	       for k,v in pairs(set.blist) do
          if v then write(k.." ") end
        end
		      print()
	     elseif cmd=="wl" then
	      for k,v in pairs(set.wlist) do
         if v then write(k.." ") end
       end
		     print()
   elseif cmd=="connected" then
     for k in pairs(connected) do
       write(k.." ")
     end
     print()
   else
     local tcmd = {}
     for k in string.gmatch(cmd, "[^ \t]+") do
       table.insert(tcmd, k)
     end
     if tcmd[1]=="dc" and tcmd[2] then
       os.queueEvent("rednet_message", tonumber(tcmd[2]), "QUIT", "JMail")
     elseif shWords[tcmd[1]] then
       shell.run(table.unpack(tcmd))
     elseif tcmd[1]=="cfg" then 
       if (not tcmd[2]) or tcmd[2]=="help" then
         print("Usage:")
         print("cfg save")
         print("cfg reload")
         print("cfg edit")
         print("cfg default")
       elseif tcmd[2]=="edit" then
         shell.run("edit /JMailServer.cfg")
       elseif tcmd[2]=="reload" then
         local h = fs.open("JMailServer.cfg", "r")
         set=textutils.unserialize(h.readAll())
         set.run=true
         set.blist[os.getComputerID()]=true
         h.close()
         print("Done!")
       elseif tcmd[2]=="default" then
         fs.delete("JMailServer.cfg")
         shell.run("/"..shell.getRunningProgram().." cfgdefault")
         os.queueEvent("paste", "cfg reload")
         os.queueEvent("key", keys.enter)
       elseif tcmd[2]=="save" then
         local h=fs.open("JMailServer.cfg", "w")
         local tm = set.run
         set.run=nil
         h.write(textutils.serialize(set))
         set.run=tm
         h.close()
       end
     elseif tcmd[1]=="bl" and tcmd[2] then
       tcmd[2]=tonumber(tcmd[2]) or "nil"
       if tcmd[3] then
         set.blist[tcmd[2]]=textutils.unserialize(tcmd[3])
         print("Blacklist status of "..tcmd[2].." set to "..tostring(tcmd[3]))
       else
         print("Blacklist status of "..tcmd[2]..": "..tostring(set.blist[tcmd[2]]))
       end
		   elseif tcmd[1]=="wl" and tcmd[2] then
       tcmd[2]=tonumber(tcmd[2]) or "nil"
       if tcmd[3] then
         set.wlist[tcmd[2]]=textutils.unserialize(tcmd[3])
         print("Whitelist status of "..tcmd[2].." set to "..tostring(tcmd[3]))
       else
         print("Whitelist status of "..tcmd[2]..": "..tostring(set.wlist[tcmd[2]]))
       end
	   	elseif tcmd[1]=="ble" then
       if tcmd[2] then
         set.useblist=textutils.unserialize(tcmd[2])
         print("Blacklist enabled set to "..tostring(tcmd[2]))
       else
         print("Blacklist enabled is "..tostring(set.useblist))
       end
		   elseif tcmd[1]=="wle" then
       if tcmd[2] then
         set.usewlist=textutils.unserialize(tcmd[2])
         print("Whitelist enabled set to "..tostring(tcmd[2]))
       else
         print("Whitelist enabled is "..tostring(set.usewlist))
       end
     else
       printError("Unknown command.")
     end
   end
   --I give up
 end
  end
end
local pull = os.pullEvent
os.pullEvent=os.pullEventRaw
rednet.host("JMail", set.hostname)
logEvent("Registered JMail server as "..set.hostname)
parallel.waitForAll(
  function()
    while true do
      console()
      print("Press BKSP to return to console, k to kick all clients, or q to abort the shutdown.")
      local key, i
      while true do
        os.startTimer(1)
        _,key=os.pullEvent()
        i=0
        for k in pairs(connected) do
          i=i+1
        end
        if i==0 then return end
        if key==14 then
          break
        elseif key==37 then
          for k in pairs(connected) do
            os.queueEvent("rednet_message",k, "QUIT", "JMail")
          end
          return
        elseif key==16 then
          set.run=true
          break
        end
      end
    end
  end, 
  function() connector(true) end
)
logEvent("Server stopped.")
log.close()
os.pullEvent=pull
shell.setDir(shelldir)
print("Server stopped.")
