local dir = fs.combine(system.dir.."/home/"..system.username(),"")
local home=dir..""
local path = {system.dir.."/bin", system.dir.."/usr/bin/", "/rom/programs/", "/rom/programs/fun", "/rom/programs/rednet"}
if term.isColour() then
  table.insert(path, "/rom/programs/advanced")
  table.insert(path, "/rom/programs/fun/advanced")
end
if turtle then
  table.insert(path, "/rom/programs/turtle")
end
if http then
  table.insert(path, "/rom/programs/http")
end
if pocket then
  table.insert(path, "/rom/programs/pocket")
end
if commands then
  table.insert(path, "/rom/programs/command")
end
if select(3, system.username())==0 then
  table.insert(path, system.dir.."/sbin")
end

local aliases = {
  ["ls"] = "list",
  ["dir"]="list",
  ["cp"]="copy",
  ["rs"]="redstone",
  ["mv"]="move",
  ["rm"]="delete",
  ["del"]="delete",
}
local termColours
if term.isColour() then
  termColours = {colours.yellow, colours.white, colours.yellow}
else
  termColours = {colours.white, colours.white, colours.grey}
end

local newShell = {}
for k,v in pairs(shell) do
  newShell[k]=v
end
function newShell.resolve(thing)
  local start = thing:sub(1,1)
  if start=="/" or start=="\\" then
    return fs.combine("", thing)
  else
    return fs.combine(dir, thing)
  end
end
newShell.isSimFork=true
function newShell.resolveProgram(thing)
  while aliases[thing]  and aliases[thing]~=thing do
    thing=aliases[thing]
  end
  local start = thing:sub(1,1)
  if start=="." then
    thing=shell.resolve(thing)
    if fs.exists(thing) and not fs.isDir(thing) then return thing end
  elseif start=="/" or start=="\\" then
    thing=fs.combine("", thing)
    if fs.exists(thing) and not fs.isDir(thing) then return thing end
  end
  local nThing
  for i=1, #path do
    nThing = fs.combine(newShell.resolve(path[i]), thing)
    if fs.exists(nThing) and not fs.isDir(nThing) then return nThing end
  end
  if thing:sub(-4)~=".lua" then return newShell.resolveProgram(thing..".lua") end
  return nil
end
function newShell.dir()
  return dir
end
system.pwd = newShell.dir
function newShell.setDir(nDir)
  dir=nDir
end
local ok, err
while true do
  ok, err = pcall(function() 
    term.setBackgroundColour(colours.black)
    term.setTextColour(termColours[1])
    local cmdHist,temp = {},{}
    print("(Crappy) SimFork Shell")
    while true do
      term.setTextColour(termColours[3])
      write(system.username().."@"..(os.computerLabel() or "SimFork"..os.computerID())..":"..dir.."$")
      term.setTextColour(termColours[2])
      table.insert(cmdHist, read(nil, cmdHist))
      if cmdHist[#cmdHist]=="" then
        table.remove(cmdHist)
      else
        if cmdHist[#cmdHist]=="exit" then return end
        cmdHist[#cmdHist]=cmdHist[#cmdHist]:gsub(" ~", " /"..home)
        temp={}
        for k in cmdHist[#cmdHist]:gmatch("[^ \t]+") do
          table.insert(temp, k)
        end
        if newShell.resolveProgram(temp[1]) then
          os.run({["shell"]=newShell, ["multishell"]=multishell}, newShell.resolveProgram(temp[1]), table.unpack(temp, 2))
        else
          printError("Unknown command: "..table.concat(temp, " "))
        end
      end
    end
  end)
  if ok then break end
  if err=="Terminated" then break end
  print("SimFork shell crashed!")
  print("Message: "..err)
  print("Press SPACE to continue or BKSP to exit.")
  if parallel.waitForAny(function() system.waitForKey(keys.space) end, function() system.waitForKey(keys.backspace) end)==2 then break end
end
