print(...)
local plist={
  {
    coro=coroutine.running(),
    env=_ENV,
    fr={},
    args={select(2, ...)},
    path=...,
  },
}
local function findProcess(pid)
  for k,v in pairs(plist) do
    if type(pid)=="number" and k==pid then
      return v
    end
    if type(pid)=="thread" and v.coro==pid then
      return k
    end
  end
end
local running=false

function create(path, args, env, init, async)
  if type(path)=="function" and env then
    --Technically, we can. But I'd like to be compatible with >5.1
    error("Cannot use custom environment on a function!", 2)
  end
  args=args or {}
  if type(args)~="table" then
    error("Argument #2 to process.create must be table or nil", 2)
  end
  env=env or _ENV
  if type(env)~="table" then
    error("Argument #3 to process.create must be table or nil", 2)
  end
  if init and type(init)~="function" then
    error("Argument #4 to process.create must be function or nil", 2)
  end
  init=init or function(...) return ... end
  local thread=coroutine.create(
    function(...)
      if type(path)=="string" then
        loadfile(path, env)(init(...))
      else
        path(init(...))
      end
    end 
  )
  if not async then
    local pid
    repeat
      pid=math.random(1, 1000)
    until not plist[pid]
    plist[pid]={
      coro=thread,
      parent=findProcess(coroutine.running()),
      env=env,
      args=args,
      r=true,
    }
    if type(path)=="string" then
      plist[pid].path=path
    end
    return pid
  else
    local rets
    repeat 
      rets={coroutine.resume(thread, table.unpack(args))}
      if coroutine.status(thread)~="dead" then
        repeat
          args={os.pullEventRaw()}
        until rets[2]==args[1] or args[1]=="terminate" or rets[2]=="" or not rets[2]
      end
    until coroutine.status(thread)=="dead"
    return table.unpack(rets)
  end
end

function info(pid)
  pid=plist[pid] or findProcess(pid)
  if type(pid)=="number" then
    pid=plist[pid]
  end
  return pid.path, pid.parent, pid.env, pid.args
end

function close(pid, force)
  if not plist[pid] then
    error("No such process!", 2)
  end
  if (force and plist[pid].coro~=coroutine.running()) or plist[pid].r then
    plist[pid]=nil
    return true
  else
    coroutine.resume(plist[pid].coro, "terminate")
    sleep(0.1)
    return (coroutine.status(plist[pid].coro)=="dead")
  end
  return false
end
function list()
  local final={}
  for i=1,1000 do
    if plist[i] then
      table.insert(final, {
        pid=i,
        path=(plist[i].path or "lua function"),
        args=plist[i].args,
        parent=plist[i].parent,
      })
    end
  end
  return final
end

function run()
  if running==true then return false end
  running=true
  local ed, i
  while true do
    ed={os.pullEventRaw()}
	   for i=1, 1000 do
	     if plist[i] and coroutine.status(plist[i].coro)=="dead" then
        if plist[i]["fr"][1]==false then
          system.log("Coroutine "..i.." crashed!")
          if plist[i].path then
            system.log("Path to file: "..plist[i].path)
          end
          system.log("Details: "..plist[i]["fr"][2])
        end
	       plist[i]=nil
	     end
	   end
    i=0
    for _,v in pairs(plist) do
      i=i+1
      if coroutine.status(v.coro)~="suspended" then
      elseif v.r then
        v.r=nil
        v.fr={coroutine.resume(v.coro, table.unpack(v.args))}
      elseif (not v.fr[2]) or v.fr[2]==ed[1] or ed[1]=="terminate" then
        v.fr={coroutine.resume(v.coro, table.unpack(ed))}
      end
    end
    if i==1 then break end
  end
  running=false
end
