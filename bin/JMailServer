if ...=="clean" then
  print("Type YES to delete all JMailServer data.")
  if string.upper(read())=="YES" then
    fs.delete("/mail")
    fs.delete("JMailServer.log")
    fs.delete("JMailServer.cfg")
    print("Done.")
  end
  return
end
if not blake then
  if fs.exists("/apis/blake") then
    os.loadAPI("/apis/blake")
  elseif fs.exists("blake") then
    os.loadAPI("blake")
  else
    if not (shell.run("pastebin get XRy3LMBG /apis/blake") or fs.exists("/apis/blake")) then
      print("Couldn't get blake hashing api")
      print("It can be found at pastebin id XRy3LMBG")
      print("Download to /apis/blake")
    else
      print("Please restart JMailServer.")
    end
    return
  end
end
if not fs.isDir("/mail/send") then fs.makeDir("/mail/send") end
fs.open("JMailServer.log", "a").close()
term.clear()
term.setCursorPos(1,1)
local set
if not fs.exists("JMailServer.cfg") then
  print("No config found---generating one.")
   set=fs.open("JMailServer.cfg", "w")
  set.write("{\
  --Please log these comments elsewhere, as they may be lost due to the saving system\
  --Logs all non-erronous, non-suspicious server access\
  logverbose = false,\
  --Blacklist settings, enabled but empty by default, overrides Whitelist\
  blist = {\
  [ "..os.computerID().." ]=true\
  },\
  useblist = true,\
  --If the server tempbans for failed login attempts\
  fail2ban = true,\
  --In seconds\
  banduration = 600,\
  --How many login/register attempts a user is allowed\
  logina = 3,\
  rega = 5,\
  --If the server accepts mail from other servers\
  getmailremote = true,\
  --A list of usernames that users cannot register as\
  bannedun = {\
    guest = true,\
    admin = true,\
    server = true,\
    public = true,\
    send = true,\
  },\
  --Whitelist settings, only allows specified people to connect\
  usewlist = false,\
  wlist = {},\
  --If registration is allowed\
  allownewuser = true,\
  --If disabled, the server will not sendmail to remote servers\
  sendmailremote = true,\
  --The hostname of the server,for clientside use\
  hostname=\"mail"..os.computerID().."\",\
  --Set below to nil to disable password\
  adminpass = \"admin\",\
  --Should we automatically kick on shutdown?\
  shkick = true,\
}")
 set.close()
 if ...=="cfgdefault" then return end
end
local log = fs.open("JMailServer.cfg", "r")
set=textutils.unserialize(log.readAll())
log.close()
set.version=tonumber("2.6")
print("Loading JMailServer "..set.version.."...")
set.run=true
local connected = {}
for k in io.lines("JMailServer.log") do
  table.insert(connected, k)
end
while #connected>128 do
  table.remove(connected, 1)
end
log = fs.open("JMailServer.log", "w")
log.writeLine(table.concat(connected, "\n"))
log.flush()
local function logEvent(t)
  log.writeLine("["..os.day().."/"..os.time().."] "..t)
  log.flush()
end
logEvent("Loading JMailServer "..set.version.."...")
connected={}
local shelldir=shell.dir()

local function connect(cid)
  local la, ra = 0, 0
  local function getMsg()
    local id, msg = rednet.receive("JMail", 600)
    if cid ~= id and id ~= nil then return getMsg()
    elseif not id then error("Dropped client "..cid, 0)
    elseif id==cid and set.shkick and not set.run then
      rednet.send(cid, {"QUIT", "Server shutting down"}, "JMail")
    return "QUIT"
  else return msg end
  end
  while true do
    local msg = getMsg()
    if msg=="QUIT" then
      if set.logverbose then logEvent(cid.." disconnected") end
      return
    elseif msg=="REGA" then rednet.send(cid, set.allownewuser, "JMail")
    elseif msg=="NONCE" then rednet.send(cid, tostring(math.random()), "JMail")
    elseif type(msg)=="table" then
      if msg[1]=="VRFY" and type(msg[2])=="string" then rednet.send(cid, fs.exists("/mail/"..msg[2].."/pass"), "JMail")
    elseif msg[1]=="REG" and set.allownewuser and not set.bannedun[msg[2]] then
      if not fs.exists("/mail/"..msg[2]) then
        fs.makeDir("/mail/"..msg[2].."/mail")
        local f = fs.open("/mail/"..msg[2].."/pass", "w")
        f.write(msg[3])
        f.close()
        f = fs.open("/mail/"..msg[2].."/mail/Welcome from SERVER@"..set.hostname, "w")
        f.write(textutils.serialize({"No date", "SERVER@"..set.hostname, {msg[2].."@"..set.hostname}, "Welcome!", "Hello and welcome to this server. At the time of writing, we are running JMail version "..set.version..". Don't worry, your password is hashed and salted with SHA-3.\n\nTHIS IS AN AUTOMATED MESSAGE, DO NOT REPLY."}))
        f.close()
        rednet.send(cid, true, "JMail")
      else
        if set.fail2ban then
          ra=ra+1
          if ra>set.rega then
          rednet.send(cid, {"QUIT", "Too many registration attempts; Banned for "..set.banduration.."s"}, "JMail")
          set.blist[cid]=os.clock()+set.banduration
          logEvent("Tempbanned "..cid..": too many registration attempts")
          return
        end
      end
      rednet.send(cid, false, "JMail")
    end
    elseif msg[1]=="AUTH" and fs.exists("/mail/"..msg[2].."/pass") then
      local f = fs.open("/mail/"..msg[2].."/pass", "r")
      local ps = f.readAll()
      f.close()
      if msg[3]==blake.digest(ps, msg[4]):toHex() then
        local un=msg[2]
      rednet.send(cid, true, "JMail")
      while true do
        local msg = getMsg()
        if msg=="QUIT" then 
          if set.verbose then logEvent(cid.." disconnected") end
          return
        elseif type(msg)=="table" then
            if msg[1]=="GET" and type(msg[2])=="string" and type(msg[2]:find("..")~="number") then
              if fs.isDir("/mail/"..un.."/mail/"..msg[2]) then
                  local reply = {fs.list("/mail/"..un.."/mail/"..msg[2]), {}}
                  for i=1, #reply[1] do
                    table.insert(reply[2], fs.isDir("/mail/"..un.."/mail/"..msg[2]..reply[1][i]))
                  end
                rednet.send(cid, reply, "JMail")
              else
                local h = fs.open("/mail/"..un.."/mail/"..msg[2], "r")
                if not h then rednet.send(cid, false, "JMail") end
                rednet.send(cid, h.readAll(), "JMail")
                h.close()
            end
          elseif msg[1]=="DEL" and not string.find(msg[2],"../") then fs.delete("/mail/"..un.."/mail/"..msg[2])
          elseif msg[1]=="MV" and not (string.find(msg[2], "../") or string.find(msg[3], "../")) then fs.move("/mail/"..un.."/mail/"..msg[2], "/mail/"..un.."/mail/"..msg[3])
          elseif msg[1]=="PC" then
            local f = fs.open("/mail/"..un.."/pass", "r")
            local i=1
            if f.readAll() ~= msg[2] then 
              rednet.send(cid, false, "JMail")
              f.close()
              logEvent(cid.." failed to change password of "..un)
              while fs.exists("/mail/"..un.."/mail/Passchange Failiure "..i.." from SERVER@"..set.hostname) do
                i=i+1
              end
              f=fs.open("/mail/"..un.."/mail/Passchange Failure "..i.." from SERVER@"..set.hostname, "w")
              f.write(textutils.serialize({"Now","SERVER@"..set.hostname,{un.."@"..set.hostname},"Passchange FAILIURE","On "..os.day().." at "..os.time().." someone unsucessfully attempted to change your password.\nIf this was not you, please secure your account.\nThe request was made from computer "..cid.."\nThanks,\nAdmin"}))
            else
              f.close()
              f=fs.open("/mail/"..un.."/pass", "w")
              f.write(msg[3])
              f.close()
              logEvent(cid.." changed pass for "..un)
              while fs.exists("/mail/"..un.."/mail/Passchange "..i.." from SERVER@"..set.hostname) do
                i=i+1
              end
              f=fs.open("/mail/"..un.."/mail/Passchange "..i.." from SERVER@"..set.hostname, "w")
              f.write(textutils.serialize({"Now","SERVER@"..set.hostname,{un.."@"..set.hostname},"Passchange notice","On "..os.day().." at "..os.time().." someone changed your password to .\nIf this was not you, please secure your account.\nThe request was made from computer "..cid.."\nThanks,\nAdmin"}))
              rednet.send(cid, true, "JMail")
            end
            f.close()
        elseif msg[1]=="VRFY" and type(msg[2])=="string" then
          rednet.send(cid, fs.isDir("/mail/"..msg[2].."/pass"), "JMail")
        elseif msg[1]=="DATA" and pcall(function() textutils.serialize(msg) end) then
          table.remove(msg, 1)
          table.insert(msg, 2, un.."@"..set.hostname)
          repeat
            f=math.random(1, 10000)
          until not fs.exists("/mail/send/"..f)
          f=fs.open("/mail/send/"..f, "w")
          f.write(textutils.serialize(msg))
          f.close()
        else
          rednet.send(cid, false, "JMail")
        end
      else
        rednet.send(cid, false, "JMail")
      end
      end
    else
      logEvent("Failed login by "..cid.." on username "..msg[2])
      if set.fail2ban then
        la=la+1
        if la>set.logina then
          rednet.send(cid, {"QUIT", "Too many login attempts; Banned for "..set.banduration.."s"}, "JMail")
          set.blist[cid]=os.clock()+set.banduration
          logEvent("Tempbanned "..cid..": Too many login attempts")
          return
        end
      end
      rednet.send(cid, false, "JMail")
    end
    else
    rednet.send(cid, false, "JMail")
    end
  else
    rednet.send(cid, false, "JMail")
  end
  end
end

local function connector(n)
  while true do
    if n and not set.run then return end
    local id, msg = rednet.receive("JMail")
    if msg=="HELO" then
      if type(set.blist[id])=="number" and os.clock()>set.blist[id] then set.blist[id]=nil end
      if connected[id] then
        if set.logverbose then logEvent(id.." is already connected.") end
        rednet.send(id, "Already connected", "JMail")
      elseif set.useblist and set.blist[id] then
        if set.logverbose then logEvent(id.." is blacklisted") end
        rednet.send(id, "Blacklisted", "JMail")
      elseif set.usewlist and not set.wlist[id] then
        if set.logverbose then logEvent(id.." is not whitelisted.") end
        rednet.send(id, "Not whitelisted", "JMail")
     elseif set.run then
       rednet.send(id, "OK connect", "JMail")
       if set.logverbose then logEvent(id.." has connected") end
       connected[id]=true
       parallel.waitForAny(connector, function() local ok, err = pcall(function() connect(id) end); if not ok then logEvent("Session with "..id.." crashed!") logEvent(err) end connected[id]=nil end)
       if n then connector(true) end
       return
     else
       if set.logverbose then logEvent(id.."'s connect rejected") end
       rednet.send(id, "Server shutting down", "JMail")
     end
   elseif type(msg)=="table" and msg[1]=="SENDMAIL" then
     if set.useblist and set.blist[id] then
       if set.logverbose then logEvent(id.." sendmail is blacklisted") end
       rednet.send(id, {"SENDMAIL", {msg[2][1], "sendmail@"..set.hostname, {msg[2][2]}, "Mailer error: Blacklist", "The server at "..set.hostname.." does not allow mail from this server."}, msg[2][2]}, "JMail")
     elseif set.usewlist and not set.wlist[id] then
       if set.logverbose then logEvent(id.." sendmail is not whitelisted.") end
       rednet.send(id, {"SENDMAIL", {msg[2][1], "sendmail@"..set.hostname, {msg[2][2]}, "Mailer error: Unauthorized", "The remote server at "..set.hostname.." has not authorized this server to send mail to it."}, msg[2][2]}, "JMail")
     elseif set.getmailremote then
       if set.logverbose then logEvent(id.." sendmail connected") end
       if fs.exists("/mail/"..msg[3].."/pass") then
         local i=""
         while fs.exists("/mail/"..msg[3].."/mail/"..msg[2][4]..i.." from "..msg[2][2]) do
         if i=="" then i=0 end
           i=i+1
         end
         local h = fs.open("/mail/"..msg[3].."/mail/"..msg[2][4]..i.." from "..msg[2][2], "w")
         h.write(textutils.serialize(msg[2]))
         h.close()
       else
         if set.logverbose then logEvent("Invalid user "..msg[3]) end
         rednet.send(id, {"SENDMAIL", {msg[2][1], "sendmail@"..set.hostname, {msg[2][2]}, "Mailer error: Bad user", "The user "..msg[3].." does not exist."}, msg[2][2]}, "JMail")
       end
     else
       if set.logverbose then logEvent(id.."'s sendmail rejected") end
       rednet.send(id, {"SENDMAIL", {msg[2][1], "sendmail@"..set.hostname, {msg[2][2]}, "Mailer error: Disabled", "The remote server has sendmail disabled."},msg[2][2]}, "JMail")
     end
   end
  end
end

local shWords={cp=true, copy=true, rm=true, remove=true, del=true, delete=true, list=true, ls=true, dir=true, mv=true, move=true, ren=true, rename=true, cd=true, edit=true, clear=true, id=true, mkdir=true, type=true}
local function console()
  local locked, dir, hist = (true and set.adminpass), shell.dir(), {}
  shell.setDir("mail")
  while true do
    if locked then
      write("Terminal locked.\nPassword:")
      if read("*")==set.adminpass then
        locked=false
      else
        print("Incorrect!")
        logEvent("Incorrect console password entered!")
      end
    else
      write(shell.dir()..">")
      local cmd = read(nil, hist)
      table.insert(hist, cmd)
      if cmd=="lock" and set.adminpass then
        locked=true
        term.clear()
        term.setCursorPos(1,1)
      elseif cmd=="log" then
        shell.run("edit /JMailServer.log")
      elseif cmd=="exit" then
        set.run = false
          shell.setDir(dir)
        logEvent("Starting shutdown procedure...")
        print("Server shutting down...")
        print("Waiting for current clients to disconnect...")
        os.queueEvent("rednet_message", os.getComputerID(), "HELO", "JMail")
        return
       elseif cmd=="bl" then
         for k,v in pairs(set.blist) do
           if v then write(k.." ") end
         end
         print()
       elseif cmd=="wl" then
        for k,v in pairs(set.wlist) do
           if v then write(k.." ") end
         end
         print()
     elseif cmd=="connected" then
       for k in pairs(connected) do
         write(k.." ")
       end
       print()
     else
       local tcmd = {}
       for k in string.gmatch(cmd, "[^ \t]+") do
         table.insert(tcmd, k)
       end
       if tcmd[1]=="dc" and tcmd[2] then
         os.queueEvent("rednet_message", tonumber(tcmd[2]), "QUIT", "JMail")
       elseif shWords[tcmd[1]] then
         shell.run(table.unpack(tcmd))
       elseif tcmd[1]=="cfg" then 
         if (not tcmd[2]) or tcmd[2]=="help" then
           print("Usage:")
           print("cfg save")
           print("cfg reload")
           print("cfg edit")
           print("cfg default")
         elseif tcmd[2]=="edit" then
           shell.run("edit /JMailServer.cfg")
         elseif tcmd[2]=="reload" then
           local h = fs.open("JMailServer.cfg", "r")
           set=textutils.unserialize(h.readAll())
           set.run=true
           set.blist[os.getComputerID()]=true
           h.close()
           print("Done!")
         elseif tcmd[2]=="default" then
           fs.delete("JMailServer.cfg")
           shell.run("/"..shell.getRunningProgram().." cfgdefault")
           os.queueEvent("paste", "cfg reload")
           os.queueEvent("key", keys.enter)
         elseif tcmd[2]=="save" then
           local h=fs.open("JMailServer.cfg", "w")
           local tm = set.run
           set.run=nil
           h.write(textutils.serialize(set))
           set.run=tm
           h.close()
         end
       elseif tcmd[1]=="bl" and tcmd[2] then
         tcmd[2]=tonumber(tcmd[2]) or "nil"
         if tcmd[3] then
           set.blist[tcmd[2]]=textutils.unserialize(tcmd[3])
           print("Blacklist status of "..tcmd[2].." set to "..tostring(tcmd[3]))
         else
           print("Blacklist status of "..tcmd[2]..": "..tostring(set.blist[tcmd[2]]))
         end
         elseif tcmd[1]=="wl" and tcmd[2] then
         tcmd[2]=tonumber(tcmd[2]) or "nil"
         if tcmd[3] then
           set.wlist[tcmd[2]]=textutils.unserialize(tcmd[3])
           print("Whitelist status of "..tcmd[2].." set to "..tostring(tcmd[3]))
         else
           print("Whitelist status of "..tcmd[2]..": "..tostring(set.wlist[tcmd[2]]))
         end
        elseif tcmd[1]=="ble" then
         if tcmd[2] then
           set.useblist=textutils.unserialize(tcmd[2])
           print("Blacklist enabled set to "..tostring(tcmd[2]))
         else
           print("Blacklist enabled is "..tostring(set.useblist))
         end
         elseif tcmd[1]=="wle" then
         if tcmd[2] then
           set.usewlist=textutils.unserialize(tcmd[2])
           print("Whitelist enabled set to "..tostring(tcmd[2]))
         else
           print("Whitelist enabled is "..tostring(set.usewlist))
         end
       else
         printError("Unknown command.")
       end
     end
     end
  end
end

local function sendmail()
  local ls, f, tab, cache
  while set.run do
    repeat
      sleep(30)
      ls=fs.list("/mail/send")
    until #ls>0
    cache={rednet.lookup("JMail")}
    for i=1, #ls do
      f=fs.open("/mail/send/"..ls[i], "r")
      tab=textutils.unserialize(f.readAll())
      f.close()
      fs.delete("/mail/send/"..ls[i])
      local a=1
      for n=1, #tab[3] do
        while fs.exists("mail/send/"..a) do
          a=math.random(10000)
        end
        if string.find(tab[3][n], "@") then
          local srv=string.gmatch(tab[3][n], "[^ @]+")
          local un=srv()
          srv=srv()
          if srv==set.hostname or tonumber(srv)==os.computerID() then
            if fs.exists("/mail/"..un.."/pass") then
              local i=""
              while fs.exists("/mail/"..un.."/mail/"..tab[4]..i.." from "..tab[2]) do
                if i=="" then i=0 end
                i=i+1
              end
              f=fs.open("/mail/"..un.."/mail/"..tab[4]..i.." from "..tab[2], "w")
              f.write(textutils.serialize(tab))
              f.close()
            end
          else
            if tonumber(srv) then
              local eh=false
              for m=1, #cache do
                if cache[m]==tonumber(srv) then eh=true break end
              end
              if eh then
                rednet.send(tonumber(srv), {"SENDMAIL", tab, un}, "JMail")
              else
                if set.logverbose then logEvent("Could not find server "..srv) end
                f=fs.open("/mail/send/"..a, "w")
                f.write(textutils.serialize({tab[1], "sendmail@"..set.hostname, {tab[2]}, "Mailer error: Bad server", "The server refrenced in address "..msg[3][i].." does not exist."}))
                f.close()
              end
            else
              srv=rednet.lookup("JMail", srv)
              if not srv then
                if set.logverbose then logEvent("Could not find server") end
                f=fs.open("/mail/send/"..a, "w")
                f.write(textutils.serialize({tab[1], "sendmail@"..set.hostname, {tab[2]}, "Mailer error: Bad server", "The server refrenced in address "..msg[3][i].." does not exists."}))
                f.close()
              end
              rednet.send(srv, {"SENDMAIL", tab, un}, "JMail")
            end
          end
        else
          if set.logverbose then logEvent("Invalid email "..tab[3][n]) end
          f=fs.open("/mail/send/"..a, "w")
          f.write(textutils.serialize({tab[1], "sendmail@"..set.hostname, {tab[2]}, "Mailer error: Bad address", "The email address "..tab[3][n].." is invalid."}))
          f.close()
        end
      end
    end
  end
end

local pull = os.pullEvent
os.pullEvent=os.pullEventRaw
rednet.host("JMail", set.hostname)
logEvent("Registered JMail server as "..set.hostname)
parallel.waitForAny(
  function()
    parallel.waitForAll(
      console,
      function() connector(true) end
    )
  end,
  sendmail
)
logEvent("Server stopped.")
log.close()
os.pullEvent=pull
shell.setDir(shelldir)
print("Server stopped.")
