function isPrime(num)
  if type(num)~="number" or num<2 then
    return false
  elseif num<4 then
    return true
  end
  for i=2, math.sqrt(num) do
    if num%i==0 then return false end
  end
  return true
end
function gcd(m,n)
  while m~=0 do
    m,n=n%m, m
  end
  return n
end

function tobits(n)
  local tab={}
  for i=0,31 do
    table.insert(tab, bit.blogic_rshift(bit.blshift(n, i), 31))
  end
  while tab[1]==0 do
    table.remove(tab, 1)
  end
  return tab
end
function tonum(tab)
  local n=0
  for i=1, #tab do
    if tab[i]==1 then
      n=n+2^(#tab-i)
    end
  end
  return n
end

function binAdd(a, b)
  if type(a)=="number" then a=tobits(a) end
  if type(b)=="number" then b=tobits(b) end
  while #a>#b do table.insert(b, 1, 0) end
  while #b>#a do table.insert(a, 1, 0) end
  local final={}
  local carry=0
  for i=#b, 1, -1 do
    if b[i]+a[i]+carry==1 then
      table.insert(final, 1, 1)
      carry=0
    elseif b[i]+a[i]+carry==0 then
      table.insert(final, 1, 0+carry)
      carry=0
    elseif b[i]+a[i]+carry==2 then
      table.insert(final, 1, 0)
      carry=1
    else
      table.insert(final, 1, 0+carry)
      carry=1
    end
    if carry==1 and i==1 then table.insert(final, 1, 1) end
  end
  return final
end
function binSub(a,b)
  b=tobits(b)
  for i=1,#b do
    b[i]=b[i]%2
  end
  return binAdd(a, b)
end

function binMul(a,b)
  if type(a)=="number" then a=tobits(a) end
  if type(b)=="number" then b=tobits(b) end
  while #a<#b do table.insert(a,1,0) end
end

function iPRFast(m,n)
  return (m^((n-1)/2)%n)==n-1, tonumber(m^((n-1)/2)%n), m^(n/2)
end

function getDHPrimes()
  local p,g=0,1
  local sClock=os.clock()
  while not isPrime(p) do
    p=math.random(1,2^31-1)
  end
  local oi=7500
  repeat
    repeat
      g=g+2
    until isPrime(g) and g%4==1
    term.clearLine()
    term.setCursorPos(1,select(2,term.getCursorPos()))
    write(p.." "..g.." ")
    write(select(2, iPRFast(g,p)).." ")
    write(select(3, iPRFast(g,p)))
    if g>oi then sleep(0) oi=oi+7500 end
  until iPRFast(g, p)
  print("And it only took "..(os.clock()-sClock).." seconds!")
  return p,g
end
