function menu(m, pt, n, k)
  pt=pt or ""
  n=n or 1
  k=k or {28}
  local s,h = term.getSize()
  h=h-2-print(pt)
  if n<h then
    s=1
  elseif n>(#m-h+1) then
    s=#m-h+1
  else
    s=n-h
  end
  while true do
    term.clear()
    term.setCursorPos(1,1)
    print(pt)
    for i=s,s+h do
      if i==n then 
        print("-> ["..m[i].."]")
      else 
        print(m[i])
      end 
      if #m==i then break end
    end
    local _,key = os.pullEvent("key")
    if key == 200 and n>1 then 
      n=n-1
      if n<s then s=s-1 end
    elseif key == 208 and n<#m then 
      n=n+1
      if s<#m-h+1 and n>s+h then s=s+1 end
    elseif table.indexOf(k, key) then return n, key end
  end 
end
function writeCenter(text)
  local w = term.getSize()
  if #text>w then
    system.writeCenter(string.sub(text, 1, #text/2))
    print()
    system.writeCenter(string.sub(text, (#text/2)-1))
  else
    local _, h = term.getCursorPos()
    term.setCursorPos((w/2)-(#text/2), h)
    write(text)
  end
end
function waitForKey(n)
  while true do
    local _,key = os.pullEvent("key")
    if key==n then return end 
  end 
end
table.indexOf = function(tab, key)
  for k, v in pairs(tab) do
    if v==key then return k end
  end
end
function bit.tobits(num)
  local tab, new = {}
  for i=0, 31 do
    new = bit.blshift(num, i)
    table.insert(tab, bit.blogic_rshift(new, 31))
  end
  while tab[1]==0 do
    table.remove(tab,1)
  end
  return tab
end
function bit.tonum(bits)
  local num = 0
  for i=1, #bits do
    if bits[i]==1 then
      num = num + 2^(#bits-i)
    end
  end
  return num
end
function printWarn(text)
  if term.isColour() then
    local pc = term.getTextColour()
    term.setTextColour(colours.yellow)
    print(text)
    term.setTextColour(pc)
  else
    print(text)
  end
end
local user = {}
--user={"root", 0, 0}
function username()
  return table.unpack(user)
end
function setUser(new, pass)
  if new==nil then user={} return end
  local h = fs.open(system.dir.."/etc/passwd", "r")
  local userpass = textutils.unserialize(h.readAll())
  h.close()
  salted=blake.digest(pass, new)
  for i=1, #userpass do
    if userpass[i][1]==new then
      if userpass[i][2]==salted or not userpass[i][2] then
        user={new, userpass[i][3], userpass[i][4]}
        return true
      else
      	return false
      end
    end
  end
end

function parse(...)
  local params,param=table.pack(...)
  local args,options={},{}
  local optDone=false
  local k,v
  for i=1, params.n do
    param=params[i]
    if not optDone and type(param)=="string" then
      if param=="--" then
        optDone=true
      elseif param:sub(1,2)=="--" then
        k,v=param:match("%-%-(.-)=(.*)")
        if not k then
          k,v=param:sub(3), true
        end
        options[k]=v
      elseif param:sub(1,1)=="-" and #param>1 then
        for k=2, #param do
          options[param:sub(k,k)]=true
        end
      else
        table.insert(args, param)
      end
    end
    return args,options
  end
end
